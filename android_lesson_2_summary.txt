HttpURLConnect
HttpURLConnect is a Java class used to send and receive data over the web. 


Logs come in five flavours, Verbose, Debug, Info, Warn and Error.
In your code you can write statements which will post log messages to logcat. To do so, you use the Log class followed by v, d, i, w or e method, depending on which log level you want the message to be at. 
Log.w(“","); for example, would output a Warning level log message. Each method takes two strings, the first is the tag, which is used to identify where the log is coming from. The second parameter is the specific log message.
The convention used in the course for the tag is to create a String constant LOG_TAG which equals the name of the class the constant is in. You can get the class name programmatically. Here’s an example for the MainActivity:
private final String LOG_TAG = MainActivity.class.getSimpleName();


MainThread vs. Background Thread
In Android there is a concept of the Main Thread or UI Thread. The main thread is responsible for keeping the UI running smoothly and responding to user input. It can only execute one task at a time. 
If you start a process on the Main Thread which is very long, such as a complex calculation or loading process, this process will try to complete. While it is completing, though, your UI and responsiveness to user input will hang.
Therefore, whenever you need to start a longer process you should consider using another “Background" thread, which doesn’t “block" the Main Thread. An easy (but by no means perfect) way to do this is to create a subclass of AsyncTask.


AsyncTask
AsyncTask is an easy to use Android class that allows you to do a task on a background thread and thus not disrupt the Main Thread. 
To use AsyncTask you should subclass it as we’ve done with FetchWeatherTask. There are four important methods to override:
	onPreExecute - 		This method is run on the UI before the task starts and is responsible for any setup that needs to be done.
	doInBackground - 	This is the code for the actual task you want done off the main thread. It will be run on a background thread and not disrupt the UI.
	onProgressUpdate - 	This is a method that is run on the UI thread and is meant for showing the progress of a task, such as animating a loading bar.
	onPostExecute - 	This is a method that is run on the UI after the task is finished.
Note that when you start an AsyncTask, it is tied to the activity you start it in. When the activity is destroyed (which happens whenever the phone is rotated), the AsyncTask you started will refer to the destroyed activity and not the newly created activity. This is one of the reasons why using AsyncTask for a longer running task is dangerous.


Adding menu buttons
So that we could add a temporary Refresh button, we learned how to add menu buttons. Here are the basic steps.
Add an xml file in res/menu/ that defines the buttons you are adding, their ordering and any other characteristics.
If the menu buttons are associated with a fragment, make sure to call setHasOptionsMenu(true) in the fragment's onCreate method.
Inflate the menu in the onCreateOptionsMenu with a line inflater.inflate(R.menu.forecastfragment, menu);
In onOptionsItemSelected you can check which item was selected and react appropriately. In the case of Refresh, this means creating and executing a FetchWeatherTask.


Permissions
By default, applications in Android are sandboxed. This means they have their own username, run on their own instance of the virtual machine, and manage their own personal and private files and memory. 
Therefore, to have applications interact with other applications or the phone, you must request permission to do so.
Permissions are declared in the AndroidManifest.xml and are needed for your app to do things like access the internet, send an SMS or look at the phone’s contacts. 
When a user downloads your application, they will see all of the permissions you request. In the interest of not seeming suspicious, it’s a good idea to only request the permissions you need.